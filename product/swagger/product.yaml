openapi: 3.0.3
info:
  title: Ecomm Products API
  description: "API responsável pelas requisições nos produtos do e-commerce"
  version: 0.0.1
  contact: 
    name: Matheus Leme
    email: matheus.santos@pagonxt.com
    url: https://github.com/LemeLHP
  license:
    name: Licença Pública
    url: https://www.gnu.org/licenses/gpl-3.0.html
paths:
  /api/categories:
    get:
      summary: Recupera ID, nome e status de todas as categorias.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
  /api/admin/categories:
    post:
      security:
      - auth: []
      summary: Cria uma nova categoria.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /api/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    get:
      summary: Recupera uma categoria pelo ID.
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          $ref: "#/components/responses/NotFound"
  /api/admin/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    put:
      security:
      - auth: []
      summary: Atualiza categoria pelo ID.
      description: Atualiza todas as informações da categoria.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: Categoria atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      security:
      - auth: []
      summary: Deleta uma categoria pelo ID.
      responses:
        200:
          description: Categoria deletada com sucesso.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      security:
      - auth: []
      summary: Ativa categoria.
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFound"
  /api/admin/products:
    post:
      security:
      - auth: []
      summary: Cria um novo produto.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /api/products:
    get:
      summary: Recupera todas as informações de todos os produtos.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    get: 
      summary: Recupera um produto pelo ID.
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Product"
        404:
          $ref: "#/components/responses/NotFound"
  /api/admin/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    put:
      security:
      - auth: []
      summary: Atualiza os produtos pelo ID.
      description: Atualiza todas as informações dos produtos.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      security:
      - auth: []
      summary: Deleta um produto pelo ID.
      responses:
        200:
          description: Produto deletado com sucesso.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    Category:
      type: object
      properties:
        categorieId:
          type: string
          format: uuid
        categorieName:
          type: string
        categorieStatus:
          type: string
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Product:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        productName:
          type: string
        productDescription:
          type: string
        productSlug:
          type: string
        productUnitPrice:
          type: number
        productQuantityInStock:
          type: number
        categorieId:
          type: string
          format: uuid
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
  responses:
    UnauthorizedError:
      description: "Usuário não autorizado."
      content:
        application/json:
          example: "Unauthorized"
    NotFound:
      description: "Não encontrado."
      content:
        application/json:
          example: "Not Found"
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT